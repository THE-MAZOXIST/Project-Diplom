<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="level1_text">Алгоритм - конечная последовательность
        точно определенных действий, приводящих к однозначному решению
        поставленной задачи. Главная особенность любого алгоритма - формальное
        исполнение, позволяющее выполнять заданные действия (команды) не только
        человеку, но и различным техническим устройствам (исполнителям).
        Процесс составления алгоритма называется алгоритмизацией.
        Свойства алгоритмов

</string>
    <string name="level1_1">
        Алгоритм - конечная последовательность точно
        определенных действий, приводящих к однозначному решению
        поставленной задачи. Главная особенность любого алгоритма -
        формальное исполнение, позволяющее выполнять заданные действия
        (команды) не только человеку, но и различным техническим
        устройствам (исполнителям). Процесс составления алгоритма называется алгоритмизацией.

        Свойства алгоритмов

        Дискретность – значения новых величин (данных) вычисляются
        по определенным правилам из других величин с уже известными значениями.
        Определенность (детерминированность) – каждое правило из набора
        однозначно, а сами данные однозначно связаны между собой, т.е.
        последова- тельность действий алгоритма строго и точно определена.
        Результативность (конечность) – алгоритм решает поставленную
        за- дачу за конечное число шагов.
        Массовость – алгоритм разрабатывается так, чтобы его можно
        было применить для целого класса задач, например, алгоритм
        вычисления опреде- ленных интегралов с заданной точностью.

    </string>
    <string name="level1_2">
        Способы описания алгоритмов
        Алгоритмы могут быть заданы: словесно, таблично, графически
        (с помощью блок-схем). Словесное задание описывает алгоритм
        с помощью слов и предложений. Табличное задание служит для
        представления алгоритма в форме таблиц и расчетных формул.
        Графическое задание, или блок-схема, - способ представления
        алгоритма с помощью геометрических фигур, называемых блоками.
        Последовательность блоков и соединительных линий образуют
        блок-схему. Описание алгоритмов с помощью блок-схем является
        наиболее наглядным и распространенным способом задания алгоритмов.
        Блок-схемы располагаются сверху вниз. Линии соединения отдельных
        блоков показывают направление процесса обработки в схеме. Каждое
        такое направление называется ветвью. Алгоритм независимо от
        его структуры всегда имеет по одному блоку «Начало» и «Конец».
        Его ветви должны в конце сойтись, и по какой бы ветви не
        было бы начато движение, оно всегда должно привести к блоку «Конец».
        При задании алгоритма с помощью блок-схемы используются
        строго определенные блоки. Основные типы блоков приведены
        в таблице 1. Следует отметить, что все блоки нумеруются.
        В этом случае номера проставляются вверху слева от блока
        (блоки «Начало», «Конец» и соединительные блоки не нумеруются).
        Стрелки на соединяющих линиях обычно не ставят при направлении
        сверху вниз и слева направо; если направление противоположное,
        то его показывают стрелкой на линии. отметить, что все блоки
        нумеруются. В этом случае номера проставляются вверху слева
        от блока (блоки «Начало», «Конец» и соединительные блоки
        не нумеруются).

    </string>
    <string name="level1_3">
        допишите вместо многоточия в поле снизу недостающую часть кода:\n\n\n

...... Person {\n\n
}\n
    </string>
    <string name="level1_4">
        допишите вместо многоточия в поле снизу недостающую часть
        кода указывающую на использование информации только
        внутри класса:\n\n\n
        class Person{\n
            ...... :\n
        int a;\n
        };\n


    </string>
</resources>