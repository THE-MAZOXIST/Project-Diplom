<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="lab1_1text">
       <b>&#160; &#160;ЛАБОРАТОРНАЯ РАБОТА No1</b>\n\n
        <b>&#160; &#160;СОСТАВЛЕНИЕ ЛИНЕЙНЫХ, РАЗВЕТВЛЯЮЩИХСЯ И ЦИКЛИЧЕСКИХ АЛГОРИТМОВ</b>\n\n

         &#160; &#160; Цель работы: изучение свойств и способов представления
        алгоритмов, базовых структур алгоритмов и
        правил за- писи блок-схем алгоритмов.\n\n

        <b>&#160; &#160;Краткие теоретические сведения</b>
     	<i>Алгоритм - конечная последовательность точно определенных действий,
        приводящих к однозначному решению постав- ленной задачи.</i>  \n
        Главная
        особенность любого алгоритма - формальное исполнение, позволяющее
        выполнять заданные действия (команды) не только человеку, но и
        различным техническим устройствам (исполнителям). Процесс
        составления алгоритма называется алгоритмизацией.\n\n

        <b>&#160; &#160;Свойства алгоритмов</b>
	    <b><i>Дискретность</i></b> – значения новых величин (данных) вычисляются
        по определенным правилам из других величин с уже известными значениями.\n
	    <b><i>Определенность</i></b> (детерминированность) – каждое правило из набора
        однозначно, а сами данные однозначно связаны между собой, т.е.
        последовательность действий алгоритма строго и точно определена.\n
        <b><i>Результативность </i></b>(конечность) – алгоритм решает по- ставленную
        задачу за конечное число шагов.\n
        <b><i>Массовость</i></b> – алгоритм разрабатывается так, чтобы его можно было
        применить для целого класса задач, например, алгоритм вычисления
        определенных интегралов с заданной точностью.\n\n

        <b>&#160; &#160;Способы описания алгоритмов</b>\n
    	Алгоритмы могут быть заданы: словесно, таблично, графически
        (с помощью блок-схем). <i>Словесное</i> задание описывает алгоритм
        с помощью слов и предложений. <i>Табличное</i> задание служит для
        представления алгоритма в форме таблиц и расчетных формул.
        <i>Графическое</i> задание, или блок-схема, - способ представления
        алгоритма с помощью геометрических фигур, называемых <i>блоками.</i>
        Последовательность блоков и соединительных линий образуют
        блок-схему. Описание алгоритмов с помощью блок-схем является
        наиболее наглядным и распространенным способом задания
        алгоритмов. Блок-схемы располагаются сверху вниз. Линии
        соединения отдельных блоков показывают направление процесса
        обработки в схеме. Каждое такое направление называется
        ветвью. Алгоритм независимо от его структуры всегда имеет
        по одному блоку «Начало» и «Конец». Его ветви должны в
        конце сойтись, и по какой бы ветви не было бы начато
        движение, оно всегда должно привести к блоку «Конец».\n

	    При задании алгоритма с помощью блок-схемы используются
        строго определенные блоки. Основные типы блоков приведены
        в таблице 1. Следует отметить, что все блоки нумеруются.
        В этом случае номера проставляются вверху слева от блока
        (блоки «Начало», «Конец» и соединительные блоки не нумеруются).
        Стрелки на соединяющих линиях обычно не ставят при направлении
        сверху вниз и слева направо; если направление противоположное,
        то его показывают стрелкой на линии. отметить, что все блоки
        нумеруются. В этом случае номера проставляются вверху слева
        от блока (блоки «Начало», «Конец» и соединительные блоки не
        нумеруются). Стрелки на соединяющих линиях обычно не ставят
        при направлении сверху вниз и слева направо; если направление
        противоположное, то его показывают стрелкой на линии.\n\n

        <b><i>&#160; &#160;Графическое описание алгоритма</i></b>
	    Графическое изображение алгоритма – это представление его в виде
        схемы, состоящей из последовательности блоков
        (геометрических фигур), каждый из которых отображает
        содержание очередного шага алгоритма. А внутри фигур
        кратко записывают действие, выполняемое в этом блоке.
        Такую схему называют блок-схемой или структурной схемой
        алгоритма, или просто схемой алгоритма.
	    Правила изображения фигур сведены в единую систему программной
        документации (дата введения последнего стандарта
        ГОСТ 19.701.90 – 01.01.1992).
        По данному ГОСТу графическое изображение алгоритма –
        это схема данных, которая отображает путь данных при
        решении задачи и определяет этапы их обработки.
    </string>
    <string name="lab1_tabl1_name">
        \n <b> Таблица 1. Основные типы блоков\n</b>
    </string>

    <string name="lab1_2text">
        &#160;&#160;&#160;Типы алгоритмов\n
        &#160;&#160;Алгоритмы бывают линейные, разветвляющиеся и циклические.\n
        &#160;&#160;Линейный алгоритм не содержит логических условий, имеет
        одну ветвь обработки и
        изображается линейной последовательностью связанных друг с другом
        блоков. Условное изображение линейного алгоритма может быть
        представлено на рис. 1.1
    </string>

    <string name="lab1_3text">
        Способы описания алгоритмов
        Алгоритмы могут быть заданы: словесно, таблично, графически
        (с помощью блок-схем). Словесное задание описывает алгоритм
        с помощью слов и предложений. Табличное задание служит для
        представления алгоритма в форме таблиц и расчетных формул.
        Графическое задание, или блок-схема, - способ представления
        алгоритма с помощью геометрических фигур, называемых блоками.
        Последовательность блоков и соединительных линий образуют
        блок-схему. Описание алгоритмов с помощью блок-схем является
        наиболее наглядным и распространенным способом задания алгоритмов.
        Блок-схемы располагаются сверху вниз. Линии соединения отдельных
        блоков показывают направление процесса обработки в схеме. Каждое
        такое направление называется ветвью. Алгоритм независимо от
        его структуры всегда имеет по одному блоку «Начало» и «Конец».
        Его ветви должны в конце сойтись, и по какой бы ветви не
        было бы начато движение, оно всегда должно привести к блоку «Конец».
        При задании алгоритма с помощью блок-схемы используются
        строго определенные блоки. Основные типы блоков приведены
        в таблице 1. Следует отметить, что все блоки нумеруются.
        В этом случае номера проставляются вверху слева от блока
        (блоки «Начало», «Конец» и соединительные блоки не нумеруются).
        Стрелки на соединяющих линиях обычно не ставят при направлении
        сверху вниз и слева направо; если направление противоположное,
        то его показывают стрелкой на линии. отметить, что все блоки
        нумеруются. В этом случае номера проставляются вверху слева
        от блока (блоки «Начало», «Конец» и соединительные блоки
        не нумеруются).

    </string>

    <string name="lab1_draw1">
        Рис. 1.1! Условное изображение линейного алгоритма
    </string>

    <string name="lab1_4text"><b>
        Пример простейшего линейного процесса</b>\n
        Наиболее часто в практике программирования требуется организовать расчет
        некоторого арифметического выражения при различных исходных данных. Например, такого:
    </string>

    <string name="lab1_5text">
        где x > 0 – вещественное, m – целое.\n
        &#160;&#160;Разработка алгоритма обычно начинается с составления схемы.
        Продумывается оптимальная последовательность вычислений, при
        которой, например, отсутствуют повторения. При написании алгоритма
        рекомендуется переменным присваивать те же имена, которые фигурируют в заданном
        арифметическом выражении либо иллюстрируют их смысл.\n
        &#160;&#160;Для того чтобы не было «длинных» операторов, исходное выражение
        полезно разбить на ряд более простых. В нашей задаче предлагается
        схема вычислений, представленная на рис. 1.2.
    </string>

    <string name="lab1_6text">Она содержит ввод и вывод исходных данных,
        линейный вычислительный процесс, вывод полученного результата. Заметим,
        что выражение x2 m2 вычисляется только один раз. Введя дополнительные
        переменные a, b, c, мы разбили сложное выражение на ряд более простых.</string>
    <string name="lab1_9text"></string>
    <string name="lab1_10text"></string>
    <string name="lab1_11text"></string>
</resources>